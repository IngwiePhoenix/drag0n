.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTML::Formatter 3"
.TH HTML::Formatter 3 "2012-06-20" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTML::Formatter \- Base class for HTML formatters
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&  use HTML::FormatSomething;
\&  my $infile  = "whatever.html";
\&  my $outfile = "whatever.file";
\&  open OUT, ">$outfile"
\&   or die "Can\*(Aqt write\-open $outfile: $!\enAborting";
\&  binmode(OUT);
\&  print OUT HTML::FormatSomething\->format_file(
\&    $infile,
\&      \*(Aqoption1\*(Aq => \*(Aqvalue1\*(Aq,
\&      \*(Aqoption2\*(Aq => \*(Aqvalue2\*(Aq,
\&      ...
\&  );
\&  close(OUT);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
HTML::Formatter is a base class for classes that take \s-1HTML\s0
and format it to some output format.  When you take an object
of such a base class and call \f(CW\*(C`$formatter\->format( $tree )\*(C'\fR
with an HTML::TreeBuilder (or HTML::Element) object, they return
the
.PP
\&\s-1HTML\s0 formatters are able to format a \s-1HTML\s0 syntax tree into various
printable formats.  Different formatters produce output for different
output media.  Common for all formatters are that they will return the
formatted output when the \fIformat()\fR method is called.  The \fIformat()\fR
method takes a HTML::Element object (usually the HTML::TreeBuilder
root object) as parameter.
.PP
Here are the four main methods that this class provides:
.ie n .IP "SomeClass\->format_file( $filename, \fIoption1 => value1, option2 => value2, ...\fR )" 4
.el .IP "SomeClass\->format_file( \f(CW$filename\fR, \fIoption1 => value1, option2 => value2, ...\fR )" 4
.IX Item "SomeClass->format_file( $filename, option1 => value1, option2 => value2, ... )"
This returns a string consisting of the result of using the given class
to format the given \s-1HTML\s0 file according to the given (optional) options.
Internally it calls \f(CW\*(C`SomeClass\->new( ... )\->format( ... )\*(C'\fR on a new
HTML::TreeBuilder object based on the given \s-1HTML\s0 file.
.ie n .IP "SomeClass\->format_string( $html_source, \fIoption1 => value1, option2 => value2, ...\fR )" 4
.el .IP "SomeClass\->format_string( \f(CW$html_source\fR, \fIoption1 => value1, option2 => value2, ...\fR )" 4
.IX Item "SomeClass->format_string( $html_source, option1 => value1, option2 => value2, ... )"
This returns a string consisting of the result of using the given class
to format the given \s-1HTML\s0 source according to the given (optional)
options. Internally it calls \f(CW\*(C`SomeClass\->new( ... )\->format( ... )\*(C'\fR
on a new HTML::TreeBuilder object based on the given source.
.ie n .IP "$formatter = SomeClass\->new( \fIoption1 => value1, option2 => value2, ...\fR )" 4
.el .IP "\f(CW$formatter\fR = SomeClass\->new( \fIoption1 => value1, option2 => value2, ...\fR )" 4
.IX Item "$formatter = SomeClass->new( option1 => value1, option2 => value2, ... )"
This creates a new formatter object with the given options.
.ie n .IP "$render_string = $formatter\->format( $html_tree_object )" 4
.el .IP "\f(CW$render_string\fR = \f(CW$formatter\fR\->format( \f(CW$html_tree_object\fR )" 4
.IX Item "$render_string = $formatter->format( $html_tree_object )"
This renders the given \s-1HTML\s0 object accerting to the options set for
\&\f(CW$formatter\fR.
.PP
After you've used a particular formatter object to format a particular
\&\s-1HTML\s0 tree object, you probably should not use either again.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
HTML::FormatText, HTML::FormatPS,
HTML::FormatRTF
.PP
HTML::TreeBuilder, HTML::Element, HTML::Tree
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1995\-2002 Gisle Aas, and 2002\- Sean M. Burke. All rights
reserved.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.
.SH "AUTHOR"
.IX Header "AUTHOR"
Current maintainer: Sean M. Burke <sburke@cpan.org>
.PP
Original author: Gisle Aas <gisle@aas.no>
