.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Data::OptList 3"
.TH Data::OptList 3 "2010-02-14" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::OptList \- parse and validate simple name/value option pairs
.SH "VERSION"
.IX Header "VERSION"
version 0.106
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Data::OptList;
\&
\&  my $options = Data::OptList::mkopt([
\&    qw(key1 key2 key3 key4),
\&    key5 => { ... },
\&    key6 => [ ... ],
\&    key7 => sub { ... },
\&    key8 => { ... },
\&    key8 => [ ... ],
\&  ]);
.Ve
.PP
\&...is the same thing, more or less, as:
.PP
.Vb 11
\&  my $options = [
\&    [ key1 => undef,        ],
\&    [ key2 => undef,        ],
\&    [ key3 => undef,        ],
\&    [ key4 => undef,        ],
\&    [ key5 => { ... },      ],
\&    [ key6 => [ ... ],      ],
\&    [ key7 => sub { ... },  ],
\&    [ key8 => { ... },      ],
\&    [ key8 => [ ... ],      ],
\&  ]);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Hashes are great for storing named data, but if you want more than one entry
for a name, you have to use a list of pairs.  Even then, this is really boring
to write:
.PP
.Vb 6
\&  $values = [
\&    foo => undef,
\&    bar => undef,
\&    baz => undef,
\&    xyz => { ... },
\&  ];
.Ve
.PP
Just look at all those undefs!  Don't worry, we can get rid of those:
.PP
.Vb 4
\&  $values = [
\&    map { $_ => undef } qw(foo bar baz),
\&    xyz => { ... },
\&  ];
.Ve
.PP
Aaaauuugh!  We've saved a little typing, but now it requires thought to read,
and thinking is even worse than typing... and it's got a bug!  It looked right,
didn't it?  Well, the \f(CW\*(C`xyz => { ... }\*(C'\fR gets consumed by the map, and we
don't get the data we wanted.
.PP
With Data::OptList, you can do this instead:
.PP
.Vb 4
\&  $values = Data::OptList::mkopt([
\&    qw(foo bar baz),
\&    xyz => { ... },
\&  ]);
.Ve
.PP
This works by assuming that any defined scalar is a name and any reference
following a name is its value.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "mkopt"
.IX Subsection "mkopt"
.Vb 6
\&  my $opt_list = Data::OptList::mkopt(
\&    $input,
\&    $moniker,
\&    $require_unique,
\&    $must_be,
\&  );
.Ve
.PP
This produces an array of arrays; the inner arrays are name/value pairs.
Values will be either \*(L"undef\*(R" or a reference.
.PP
Valid values for \f(CW$input\fR:
.PP
.Vb 6
\& undef    \-> []
\& hashref  \-> [ [ key1 => value1 ] ... ] # non\-ref values become undef
\& arrayref \-> every value followed by a ref becomes a pair: [ value => ref   ]
\&             every value followed by undef becomes a pair: [ value => undef ]
\&             otherwise, it becomes [ value => undef ] like so:
\&             [ "a", "b", [ 1, 2 ] ] \-> [ [ a => undef ], [ b => [ 1, 2 ] ] ]
.Ve
.PP
\&\f(CW$moniker\fR is a name describing the data, which will be used in error
messages.
.PP
If \f(CW$require_unique\fR is true, an error will be thrown if any name is given
more than once.
.PP
\&\f(CW$must_be\fR is either a scalar or array of scalars; it defines what kind(s) of
refs may be values.  If an invalid value is found, an exception is thrown.  If
no value is passed for this argument, any reference is valid.  If \f(CW$must_be\fR
specifies that values must be \s-1CODE\s0, \s-1HASH\s0, \s-1ARRAY\s0, or \s-1SCALAR\s0, then Params::Util
is used to check whether the given value can provide that interface.
Otherwise, it checks that the given value is an object of the kind.
.PP
In other words:
.PP
.Vb 1
\&  [ qw(SCALAR HASH Object::Known) ]
.Ve
.PP
Means:
.PP
.Vb 1
\&  _SCALAR0($value) or _HASH($value) or _INSTANCE($value, \*(AqObject::Known\*(Aq)
.Ve
.SS "mkopt_hash"
.IX Subsection "mkopt_hash"
.Vb 1
\&  my $opt_hash = Data::OptList::mkopt_hash($input, $moniker, $must_be);
.Ve
.PP
Given valid \f(CW"mkopt"\fR input, this routine returns a reference to a hash.  It
will throw an exception if any name has more than one value.
.SH "EXPORTS"
.IX Header "EXPORTS"
Both \f(CW\*(C`mkopt\*(C'\fR and \f(CW\*(C`mkopt_hash\*(C'\fR may be exported on request.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo \s-1SIGNES\s0, \f(CW\*(C`<rjbs@cpan.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests at <http://rt.cpan.org>. I will be
notified, and then you'll automatically be notified of progress on your bug as
I make changes.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2006\-2007, Ricardo \s-1SIGNES\s0.  This program is free software;  you can
redistribute it and/or modify it under the same terms as Perl itself.
