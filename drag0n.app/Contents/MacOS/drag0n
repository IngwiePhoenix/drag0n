#!/usr/bin/php
<?php
class drag0n {

	public static $longopts = array("appjs", "uri:");
	public static $shortopts = "au:";

	public static function logger($msg) {
		static $stderr;
		if (!is_resource($stderr))
			$stderr = fopen("php://stderr", "w");
		fwrite($stderr, $msg."\n");
	}

	public static function main($argc, $argv) {
		$_ENV += $_SERVER; // $_ENV isn't always populated 

		$options = getopt(self::$shortopts, self::$longopts);

		// Quick, a key!
		$key = ( isset($options["uri"]) 
			? "uri" 
			: ( isset($options["u"]) 
				? "u" 
				: null 
			)
		);
		if(!is_null($key))
			$opt = $options[$key];
		else 
			$opt = null;

		// Run the webapp if we are asked to.
		if( isset($options['appjs']) || (defined("_DISPLAY_WEB") && _DISPLAY_WEB) )
			self::runWeb($options, $opt); 
		else
			self::runApp($argc, $argv, $opt);
	}

	public static function runApp($argc, array $argv, $opt) {
		if(!is_null($opt)) putenv("_DRGN=$opt");
		$dir = realpath( dirname($argv[0])."/.." );
		self::logger("[drag0n/php] Working folder is now: $dir");
		putenv("NODE_PATH=$dir/System/lib/node");
		self::logger("[drag0n/php] Adding NODE_PATH: ".$_ENV['NODE_PATH']);
		$script = escapeshellarg(
			'do shell script "'
			."sudo -E $dir/MacOS/node --harmony $dir/MacOS/d0GUI.js $opt >/dev/null 2>&1 &"
			.'" with administrator privileges'
		);
		self::logger("[Apple/osascript] Executing: $script");
		exec("osascript -e $script");
	}
	
	public static function runWeb($uri) {
		// Prepair our workspace
		$dir = realpath( dirname(__FILE__)."/.." );
		include_once($dir."/Library/macos/Apple.php");

		// prepair the Data folder
		@mkdir($dir."/System/etc/interface.d");
		@mkdir($dir."/System/tmp");
		@mkdir($dir."/Application/runtime");

		// change the following paths if necessary
		$yii=$dir.'/Frameworks/yii.framework/Resources/yii.php';
		$config=$dir.'/Application/config/main.php';

		// AppJS paths
		defined("APPJS_ROOT") 		or define("APPJS_ROOT",$dir);
		defined("APPJS_BASEDIR") 	or define("APPJS_BASEDIR","http://appjs/");

		// We NEED Yii.
		require_once($yii);

		// remove the following lines when in production mode
		defined('YII_DEBUG') or define('YII_DEBUG',true);
		// specify how many levels of call stack should be shown in each log message
		defined('YII_TRACE_LEVEL') or define('YII_TRACE_LEVEL',3);

		Yii::createWebApplication($config)->run();
	}
}

drag0n::main($argc, $argv);
